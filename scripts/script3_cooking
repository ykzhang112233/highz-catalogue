#!/usr/bin/env bash

# Script Description:
# 
###########################################
##### 1. Init ##### 
clear

# Get Directory where script is located
# BASEDIR is the directory where the script is located; CAT_DIR is the directory where the catalogues are located
BASEDIR=$(dirname "$0")
CAT_DIR="${BASEDIR}/../catalogues"
TEMP_DIR=${BASEDIR}
echo "BASEDIR: $BASEDIR"

# Change Shell execution to the place where the script lies
cd "$BASEDIR"

# Path to stilts program
stilts_dir="${BASEDIR}/stilts.jar"


############################################################
##### 2. Define input paths from the previous output #####
cat_o1="${TEMP_DIR}/tmp_sdss.fits"  #optical catalogue1
cat_sdss_hz="${TEMP_DIR}/tmp_sdssz3.fits"
matched_r1="${TEMP_DIR}/match1_o1r1.fits" # matched radio catalogue1
matched_r2="${TEMP_DIR}/match1_o1r2.fits"  # matched radio catalogue2
matched_r3="${TEMP_DIR}/match1_o1r3.fits" # matched radio catalogue3
matched_r4="${TEMP_DIR}/match1_o1r4.fits"  # matched radio catalogue4
############################################################
# 3. Define the cooking criteria
## 3.1 Set the matching radius for different catalogues and join type
# raidus_o1r1=3   # First 5"
# raidus_o1r2=25  # NVSS 45"
# raidus_o1r3=100 # gleam psfmin <200"
# raidus_o1r4=15  # RACS 25"
# 1. Filter by distance
radio_cats=("${matched_r1}" "${matched_r2}" "${matched_r3}" "${matched_r4}")
psfmajs=("Maj_r1" "MajAxis_r2" "psfawide_r3" "amaj_r4")
psfmins=("Min_r1" "MinAxis_r2" "psfbwide_r3" "bmin_r4")

for i in "${!radio_cats[@]}"; do
    num=$(($i + 1))
    radio_cat=${radio_cats[$i]}
    psfmaj=${psfmajs[$i]}
    psfmin=${psfmins[$i]}
    fits_temp="filtered_r${num}.fits"
    out_file="mr${num}_t123.fits"

    echo "Processing ${radio_cat} with PSF Maj: $psfmaj and PSF Min: $psfmin"
    selection1="select \"(${psfmin} == 0 && ${psfmaj} == 0) || (${psfmin} == 0 && ${psfmaj} !=0 && Separation <= ${psfmaj}/2) || (${psfmin} != 0 && Separation <= ${psfmin}/2)\""
    echo "do $selection1"
    java -jar $stilts_dir tpipe ifmt=fits in="${radio_cat}" \
        cmd="$selection1" \
        out="${fits_temp}"
    echo "Finishing selection by distance (1/5)"
    # 2.  After filtering, adjust the groupIDs accordingly
    java -jar $stilts_dir tgroup in="${fits_temp}" \
        keys=GroupID \
        aggcols="0;count;GroupCount" \
        out="group_count_r${num}.fits"
    echo "Grouped ${radio_cat} by GroupID, count: GroupCount (2/5)"
    # 3. Begin looking for tier1 sources (single match)
    java -jar $stilts_dir tpipe in="group_count_r${num}.fits" \
        cmd='select "!NULL_GroupCount && GroupCount >= 1"' \
        out="filtered_groupids_r${num}.fits"

    java -jar $stilts_dir tmatch2 \
        in1="${fits_temp}" \
        in2="filtered_groupids_r${num}.fits" \
        values1=GroupID values2=GroupID \
        matcher=exact \
        join=all1 \
        find=all\
        fixcols=dups \
        ocmd='delcols "GroupID GroupSize"' \
        out="temp_with_gcount_r${num}.fits"
# aftet the all1 match the GroupID will have _1 and _2. just select the one with _1 to be the new GroupID and del the old cols
    java -jar $stilts_dir tpipe \
        in="temp_with_gcount_r${num}.fits" \
        cmd='addcol GroupID "!NULL_GroupID_1 ? GroupID_1 : NULL"' \
        cmd='delcols GroupID_2' \
        cmd='delcols GroupID_1' \
        cmd='addcol GroupSize "GroupSize_1"' \
        cmd='delcols GroupSize_1' \
        out="temp_with_gcount_r${num}.fits"
# in this step, we have both GroupSize and GroupCount, they are kinda ovarlapping but should be different.
# GroupCount is the size of the group after filtering by distance, while GroupSize is the original size of the group before filtering.
# We can make them more clear by renaming them, GrpSize_before is for old GroupSize and Groupsize is from GroupCount for further use
    rpl_cmd1='replaceval NULL 1 "GroupSize"'
    rpl_cmd2='replaceval NULL 1 "GroupCount"'
    rpl_cmd3='replacecol GroupSize "GroupCount"'
    java -jar $stilts_dir tpipe ifmt=fits \
        in="temp_with_gcount_r${num}.fits" \
        cmd="$rpl_cmd1" \
        cmd="$rpl_cmd2" \
        cmd='addcol GrpSize_before "GroupSize"' \
        cmd="$rpl_cmd3" \
        cmd='delcols "GroupCount"' \
        out="${fits_temp}"
    echo "Filtered ${radio_cat} to ${fits_temp} with GroupSize adjusted to GroupCount for Tier1 sources. (3/5)"


    # 4. begin looking for tier2 and tier3 sources (grouped source with all z>3 (tier2) or one of them z>3 (tier3))
    java -jar $stilts_dir tgroup \
        in="${fits_temp}" \
        keys=GroupID \
        aggcols='Z_o1;max;group_z_max Z_o1;min;group_z_min 0;count;GroupSize' \
        out="group_zcheck_r${num}.fits"

    java -jar $stilts_dir tpipe \
        in="group_zcheck_r${num}.fits" \
        cmd='select "!NULL_GroupID && GroupSize > 1 && group_z_max > 3"' \
        cmd='keepcols "GroupID group_z_min"' \
        out="group_hz_sources_r${num}.fits"
    nrows=$(java -jar $stilts_dir tpipe in="group_hz_sources_r${num}.fits" omode='count' | grep 'rows:' | awk '{print $4}')

    if [ "$nrows" -eq 0 ]; then
        echo "⚠️ group_hz_sources_r${num}.fits is empty, means no potential Tier2 and 3 sources, just skip the selection of high-z groups."
        java -jar $stilts_dir tpipe ifmt=fits in="${fits_temp}" \
            cmd='addcol group_z_min NULL' \
            out="groups_${fits_temp}"
        skip_t23=1
        echo "Step (4/5) skipped, just add a NULL column group_z_min in case of error, proceeding to flagging sources."
    else
        echo "✅ Found $nrows high-z groups in this matched cat, proceeding..."
        skip_t23=0
        java -jar $stilts_dir tmatch2 \
            in1="${fits_temp}" \
            in2="group_hz_sources_r${num}.fits" \
            matcher=exact \
            join=all1 \
            find=all \
            values1=GroupID values2=GroupID \
            ocmd='delcols "GroupID GroupSize"' \
            ocmd='addcol GroupID "!NULL_GroupID_1 ? GroupID_1 : NULL"' \
            ocmd='addcol GroupSize "!NULL_GroupSize_1 ? GroupSize_1 : NULL"' \
            ocmd='delcols "GroupID_1 GroupID_2 GroupSize_1"' \
            out="groups_${fits_temp}"
        echo "Filtered ${fits_temp} to include only groups with z>3 sources.(4/5)"
    fi
    
    # 5. Adding Flag cols for the three tier sources: 1(single highz), 2(group all highz), 3(group with one highz)
    # use 2.7 give a tolerance for the group_z_min, so that we can include the sources within an error of 5% (0.15) in tier2 and tier3
    flag_cmd1='addcol source_tier "GroupSize==1 && Z_o1>=3 ? 1 : 0"'
    flag_cmd2='replacecol source_tier "source_tier == 0 && !NULL_group_z_min && group_z_min >= 2.85 ? 2 : source_tier"'
    flag_cmd3='replacecol source_tier "source_tier == 0 && !NULL_group_z_min && group_z_min < 2.85 && Z_o1>=3 ? 3 : source_tier"'
    # flag_cmd2='replacecol source_tier "source_tier == 0 &&  "
    java -jar $stilts_dir tpipe ifmt=fits in="groups_${fits_temp}" \
        cmd="$flag_cmd1" \
        cmd="$flag_cmd2" \
        cmd="$flag_cmd3" \
        out="${out_file}"
    echo "Finished processing ${radio_cat} for flagging all three tiers, output saved to ${out_file} (5/5)"
    echo "==========================================================="
done
exit
